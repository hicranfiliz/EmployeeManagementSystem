@inject AuthenticationStateProvider AuthStateProvider
<div class="btn-group">
    <img src="@(ProfileImage == "" ? "../images/profile/user.png" : ProfileImage)" width="30" height="30" style="border-radius:50%; margin-right:5px;"/>
    <button type="button" class="btn btn-none border-0 dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
        <span>@UserName</span>
        <span class="visually-hidden">Toggle Dropdown</span>
    </button>
    <ul class="dropdown-menu mt-2 border-0">
        <li>
            <div class="card">
                <div class="card-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <a class="text-primary fw-bold float-start text-decoration-none" style="font-family:Tahoma; cursor:pointer;">
                                <i class="bi bi-person-gear"></i>
                                Profile
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="card-footer">
                    <button class="btn btn-danger btn-sm fw-bold w-100" @onclick="LogoutClicked">
                        <i class="bi bi-box-arrow-left"></i>
                        Logout
                    </button>
                </div>
            </div>
        </li>
    </ul>
</div>

@code{
    public string ProfileImage { get; set; } = "";
    public string UserName { get; set; } = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name ?? "Guest"; // Kullanıcı adı
        }
        else
        {
            UserName = "Guest"; // Kullanıcı oturum açmamış
        }
    }

    async Task LogoutClicked()
    {
        var logoutModel = new UserSession();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(logoutModel);
        NavManager.NavigateTo("/identity/account/login", replace: true, forceLoad: true);
    }
}